import { Injectable } from '@nestjs/common';
import { genderKeyboard } from 'src/telegram/keyboards/profile/gender.keyboard';
import { SessionManager } from 'src/telegram/sessions/sessionManager.session';
import { MessageValidator } from 'src/validations/message.validator';
import { Context } from 'telegraf';
import { UpdateHandler } from './update-handler.command';
import { ProfileTelegramPresenter } from 'src/telegram/presenters/profile-telegram.presenter';
import { backKeyboard } from 'src/telegram/keyboards/profile/back.keybard';
import { EditSessionSteps } from 'src/enums/EditSession-steps.enum';
import { ISessionSchema } from 'src/interfaces/sessionSchema.interface';

@Injectable()
export class ChangeHandler {
  constructor(
    private readonly sessionManager: SessionManager<ISessionSchema>,
    private readonly updateHandler: UpdateHandler,
    private readonly profileTelegramPresenter: ProfileTelegramPresenter,
  ) {}
  async handlerRequest(userId: number, ctx: Context): Promise<void> {
    const session = this.sessionManager.get(userId);
    if (!session) return;

    const state = session.sessionManager;
    const handler = session.handlerStatus;

    if (MessageValidator.isTextMessage(ctx)) {
      if (ctx.message.text === '‚¨ÖÔ∏è –ù–∞–∑–∞–¥') {
        this.sessionManager.end(userId, 'sessionManager');
        ctx.reply('üî• –ö–ª–∞—Å! –û—Å—å —Ç–≤–æ—è –æ–Ω–æ–≤–ª–µ–Ω–∞ –∞–Ω–∫–µ—Ç–∞:');
        await this.profileTelegramPresenter.sendProfileForUser(userId, ctx);
        await this.sessionManager.end(userId, 'handlerStatus');
        return;
      }
      if (ctx.message.text === 'üîû –í—ñ–∫') {
        this.sessionManager.update(userId, 'sessionManager', {
          step: EditSessionSteps.AGE,
        });
        ctx.reply('–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤ –∑–∞—Ä–∞–∑? üî¢ –í–∫–∞–∂–∏ –Ω–æ–≤–∏–π –≤—ñ–∫ —Ü–∏—Ñ—Ä–∞–º–∏');
        return;
      } else if (ctx.message.text === 'üìù –Ü–º º—è') {
        this.sessionManager.update(userId, 'sessionManager', {
          step: EditSessionSteps.NAME,
        });
        ctx.reply(' –í–≤–µ–¥–∏ –Ω–æ–≤–µ —ñ–º‚Äô—è ‚Äî —è–∫ –¥–æ —Ç–µ–±–µ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è?');
        return;
      } else if (ctx.message.text === 'üì∏ –§–æ—Ç–æ') {
        this.sessionManager.update(userId, 'sessionManager', {
          step: EditSessionSteps.PHOTO,
        });

        ctx.reply(
          'üì∑ –ù–∞–¥—ñ—à–ª–∏ –Ω–æ–≤–µ —Ñ–æ—Ç–æ, —è–∫–µ –∑ º—è–≤–∏—Ç—å—Å—è —É —Ç–≤–æ—ó–π –∞–Ω–∫–µ—Ç—ñ',
          backKeyboard,
        );
        return;
      } else if (ctx.message.text === 'üë©üßë –°—Ç–∞—Ç—å') {
        this.sessionManager.update(userId, 'sessionManager', {
          step: EditSessionSteps.GENDER,
        });
        ctx.reply('üë• –û–±–µ—Ä–∏, —Ö—Ç–æ —Ç–∏:', genderKeyboard);
        return;
      }
    }
    if (state?.step) {
      await this.updateHandler.updateHandler(ctx, userId, state?.step);
    }
    return;
  }
}
